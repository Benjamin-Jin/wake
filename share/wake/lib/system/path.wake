# Read the file contents of a Path
global def read path =
  def imp p = prim "read"
  imp path.getPathName

# Simplify away the ..s and .s in a String
global def simplify path = prim "simplify"

# Reframe path into a form accesible relative to dir
global def relative dir path = prim "relative"

# Locate an executable in the search path
global def whichIn path exec = memoize 0 (
  def imp path exec = prim "search_path"
  imp path exec
)

global def which exec = whichIn path exec
global def workspace = prim "workspace"

def mkdirRunner =
  def imp m p = prim "mkdir"
  def pre input =
    match input.getRunnerInputCommand
      _, _, mode, dir, Nil = Pair input (Pair mode dir)
      _ = raise "mkdirRunner: invalid command-line"
  def post (Pair output (Pair mode dir)) =
    output
    | editRunnerOutputOutputs (imp (int mode) dir, _)
  makeRunner pre post virtualRunner

def mkdirImp inputs mode path =
  makePlan ("<mkdir>", "-m", "0{strbase 8 mode}", path, Nil) inputs
  | setPlanRunner      mkdirRunner
  | setPlanKeep        False
  | setPlanEnvironment Nil
  | runJob
  | getJobOutput

# Create a directory in the parent
global def mkdirIn parent mode name =
  mkdirImp (parent, Nil) mode "{parent.getPathName}/{name}".simplify

# Make all every element in the directory path with mode 0775
global def mkdir path =
  def root = match _
    "", x, t = foldl (mkdirIn _ 0775 _) (mkdirImp Nil 0775 "/{x}") t
    x, t     = foldl (mkdirIn _ 0775 _) (mkdirImp Nil 0775 x) t
    Nil      = raise "impossible"
  path | simplify | tokenize "/" | root

def writeImp inputs mode path content =
  def writeRunner =
    def imp m p c = prim "write"
    def pre input = Pair input Unit
    def post (Pair output Unit) =
      output
      | editRunnerOutputOutputs (imp mode path content, _)
    makeRunner pre post virtualRunner
  makePlan ("<write>", str mode, path, Nil) inputs
  | setPlanRunner      writeRunner
  | setPlanOnce        False
  | setPlanEnvironment Nil
  | runJob
  | getJobOutput

# Create a file with the given mode in the specified directory
global def writeIn parent mode name content =
  writeImp (parent, Nil) mode "{parent.getPathName}/{name}".simplify content

# Create all directories and the named file
global def write rawpath content =
  def path = simplify rawpath
  def parent = simplify "{path}/.."
  writeImp (mkdir parent, Nil) 0664 path content
