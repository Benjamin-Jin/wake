global tuple CPackage =
  global Verison: String
  global Headers: List Path
  global Objects: List Path
  global CFlags:  List String
  global LFlags:  List String

global def makeCPackage version = CPackage version Nil Nil Nil Nil
global def flattenCPackages packages =
  def headers = map getCPackageHeaders packages | flatten
  def objects = map getCPackageObjects packages | flatten
  def cflags  = map getCPackageCFlags  packages | flatten
  def lflags  = map getCPackageLFlags  packages | flatten
  CPackage "" headers objects cflags lflags

def pkgConfigImp args = memoize 0 (
  def cmdline = which "pkg-config", args
  def addenv list = match (getenv "PKG_CONFIG_PATH")
    Some p = "PKG_CONFIG_PATH={p}", list
    None   = list
  def result =
    makeManualPlan cmdline Nil (\_ Nil) # caching ok
    | editPlanEnvironment addenv
    | runJob
  def output = result.getJobStdout | tokenize "\n" | head | tokenize " " | filter (_ !=* "")
  if result.getJobStatus != 0 then None else Some output
)

def fail pkg = match _
  Some x = x
  None   = raise "pkg-config for {pkg} not found"

global def cflags pkg = pkgConfigImp ("--short-errors", "--cflags", tokenize " " pkg) | fail pkg
global def libs   pkg = pkgConfigImp ("--short-errors", "--libs",   tokenize " " pkg) | fail pkg

global def pkgConfig pkg =
  def pkgs = tokenize " " pkg
  def version = pkgConfigImp ("--short-errors", "--modversion", pkgs)
  match version
    Some (version, _) =
      def cflags  = pkgConfigImp ("--silence-errors", "--cflags", pkgs)
      def lflags  = pkgConfigImp ("--silence-errors", "--libs",   pkgs)
      match cflags lflags
        (Some cflags) (Some lflags) = Some (CPackage version Nil Nil cflags lflags)
        _ _ = None
    _ = None
