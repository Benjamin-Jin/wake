global tuple CPackage =
  global Verison String
  global Headers List Path
  global Objects List Path
  global CFlags  List String
  global LFlags  List String

global def makeCPackage version = CPackage version Nil Nil Nil Nil

def pkgConfigImp args = memoize 0 (
  def cmdline = which "pkg-config", args
  def result = manualJob cmdline Nil (\_ Nil) # caching ok
  def output = result.getJobStdout | tokenize "\n" | head | tokenize " " | filter (_ !=* "")
  if result.getJobStatus != 0 then raise "pkg-config failed" else output
)

def fail pkg = match _
  "pkg-config failed", Nil = raise "pkg-config for {pkg} not found"
  x = raise x.head

global def cflags pkg = try (fail pkg) (pkgConfigImp ("--short-errors", "--cflags", tokenize " " pkg))
global def libs   pkg = try (fail pkg) (pkgConfigImp ("--short-errors", "--libs",   tokenize " " pkg))

global def pkgConfig pkg =
  def pkgs = tokenize " " pkg
  def version = pkgConfigImp ("--short-errors", "--modversion", pkgs) | head
  def cflags  = pkgConfigImp ("--silence-errors", "--cflags", pkgs)
  def lflags  = pkgConfigImp ("--silence-errors", "--libs", pkgs)
  (CPackage _ Nil Nil _ _) | reraise version | reraise cflags | reraise lflags | try (fail pkg)
