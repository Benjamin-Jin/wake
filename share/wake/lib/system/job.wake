# The internal function operates on imploded strings, not lists
def primjob pool root dir stdin env cmd = prim "job_launch"
def oncejob root dir stdin env cmd = memoize primjob 1 root dir stdin env cmd
def primcache dir stdin env cmd visible = prim "job_cache"
def oncecache dir stdin env cmd visible = memoize primcache dir stdin env cmd visible

def implode l = cat (foldr (_, "\0", _) Nil l)
global def jobcache build dir stdin env cmd visible =
  match (tryelse (\_ None) (Some _) (oncecache dir stdin env.implode cmd.implode visible.implode))
    None     = build 0
    Some out =
      def notOk pair = hashcode pair.first !=* pair.second
      match (find notOk out.outputs)
        None = out
        Some (Pair (Pair file saw) _) =
          def expect = hashcode file
          raise "Hash mismatch for {file} ({saw} != {expect}); remove it or run with -f"

# Launch a job, raw interface
# If you use this API, you MUST also run 'finish' on the result AFTER status is available
#   root:  fake root directory
#   dir:   directory where the command should be run
#   stdin: file to attach to standard input ("" = nothing)
#   env:   string list of all environement variables in the form key=value
#   cmd:   string list of command arguments (head is the full path to the command)
global def launch root dir stdin env cmd = oncejob root dir stdin env.implode cmd.implode

def fail job ok =
  if job.status == 0 then ok else
    raise "Non-zero exit status {str job.status})"

# Access the output of a job
def stdio job fd  = prim "job_output" # 1=stdout, 2=stderr; blocks till closed
def tree  job typ = prim "job_tree"   # 0=visible, 1=input, 2=output; blocks till finished
global def kill    job signal = prim "job_kill" # s != 0 => kills; blocks till exit; return status
global def status  job = kill  job 0
global def stdout  job = stdio job 1
global def stderr  job = stdio job 2
global def inputs  job = fail job (tree job 1)
global def outputs job = fail job (tree job 2)
global def output  job =
  def got = outputs job
  def num = got.len
  if      num == 1 then got.head.first
  else if num == 0 then raise "no outputs available"
  else                  raise "more than one output found"

# Complete a job, marking done and recording used inputs/outputs
global def finish job inputs outputs =
  def imp job inputs outputs = prim "job_finish" # ignored except on first call; blocks till exit; returns true
  imp job inputs.implode outputs.implode

global def hashpair f = memoize ( # Pair file hash
  def job = launch "." "." "" Nil (which "md5sum", f, Nil)
  def final _ = finish job Nil Nil
  def wait = if job.status == 0 then final 0 else final 0
  def add f h = prim "add_hash"
  if job.status == 0 then add f (head (extract '(.{32}).*' job.stdout)) else raise "Hashing failed"
)
global def hashname f = (hashpair f).first  # just the filename
global def hashcode f = (hashpair f).second # just the hashcode

# A job where all inputs and outputs are known a-priori
global def uncached_simple_job dir stdin env cmd inputs outputs = memoize (
  def job = launch "." dir stdin env cmd
  def final _ = finish job (map hashname inputs) (map hashname outputs)
  def wait = if job.status == 0 then final 0 else final 0
  job
)

global def cached_simple_job dir stdin env cmd inputs outputs =
  def build _ = uncached_simple_job dir stdin env cmd inputs outputs
  jobcache build dir stdin env cmd (map hashname inputs)

# Location of wake itself
def wakepath = prim "execpath"

# Still not caching, just hermetic
def fusepath = relative workspace (simplify "{wakepath}/../lib/wake/fuse-wake")
global def uncached_fuse_job dir stdin env cmd files dirs = memoize (
  def visible = map hashname files ++ (dir, dirs)
  def fuse = primjob 0 "." "." "" "" (fusepath, visible).implode
  def endfuse _ = finish fuse Nil Nil
  def waitfuse = if fuse.status == 0 then endfuse 0 else endfuse 0
  def err = fuse.stderr
  def handle _ = raise "Could not start fuse-wake: {err}"
  def list = try handle (extract 'OK: (.*)' err)
  def job = launch list.head dir stdin env cmd
  def final _ = # run once job exits
    def status = kill fuse 14 # SIGALRM
    def result = extract "(.*\0)\0(.*)" fuse.stdout
    def inputs = (tokenize "\0" (at 0 result)).reverse.tail
    def outputs = (tokenize "\0" (at 1 result)).reverse.tail
    finish job inputs (map hashname outputs)
  def wait = if job.status == 0 then final 0 else final 0
  job
)

global def cached_fuse_job dir stdin env cmd files dirs =
  def build _ = uncached_fuse_job dir stdin env cmd files dirs
  jobcache build dir stdin env cmd (map hashname files)

# Most jobs don't need explicit stdin/env control
global def environment = subscribe environment
global def job cmd files dirs = cached_fuse_job "." "" environment cmd files dirs
global def simple_job cmd inputs outputs = cached_simple_job "." "" environment cmd inputs outputs
