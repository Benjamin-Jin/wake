# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The ``Option`` datatype.  Either holds a valid entry with value ``a`` (``Some``), or nothing (``None``).
global data Option a =
  Some a
  None

# Returns ``True`` if the ``Option`` contains a value, or ``False`` if it is empty.
global def isSome = match _
  Some _ = True
  None   = False

# Returns ``True`` if the ``Option`` is empty, ``False`` otherwise.
global def isNone = ! isSome _

# Returns the ``Option``'s value if it is exists, or ``b`` if the ``Option`` is empty.
global def getOrElse b = match _
  Some a = a
  None   = b
 
# Inteded use: ``int "x" | orElse (int "z") | getOrElse 4``
# In this case, returns ``x`` if it exists, otherwise ``z``.  Returns ``None`` if both are empty.
global def orElse = match _ _
  _ (Some a) = Some a
  (Some a) _ = Some a
  None None  = None

# Returns the Option's value if Some, otherwise returns the result of fn
# (fn: Unit => a) => Option a => a
global def getOrElseFn fn = match _
  Some a = a
  None   = fn Unit

# Either returns an Option containing result of invoking f on the Option's value if it exists, or None if the Option is empty.
global def omap f = match _
  Some a = Some (f a)
  None   = None

# Either returns the result of invoking f on the Option's value if it exists, or None if the Option is empty.
# Unlike omap, it does not return an Option, but just the value itself, unless it is None.
global def omapPartial f = match _
  Some a = f a
  None   = None

# Either returns the original Option if its value satisfies the function f, otherwise it returns None.
global def ofilter f = match _
  Some a if f a = Some a
  _ = None

# Finds the first Some in a List of Option or returns None if List is all None
# List (Option a) => Option a
global def findSome = findSomeFn (_)

# Applies a function that returns Option to each element of a List
#   returning the first Some or a None
# (fn: a => Option b) => List a => Option b
global def findSomeFn fn =
  def helper = match _
    Nil = None
    h, t = match (fn h)
      Some x = Some x
      None = helper t
  helper

# If a List of Options is all Some, returns Some of the elements, otherwise None
# List (Option a) => Option (List a)
global def findNone = findNoneFn (_)

# Applies a function that returns Option to each element of a List
#   returning None if any result is None, otherwise aggregates the Somes into a List
# (fn: a => Option b) => List a => Option (List b)
global def findNoneFn fn =
  def helper = match _
    Nil = Some Nil
    h, t = match (fn h)
      None = None
      Some x = match (helper t)
        Some t = Some (x, t)
        None   = None
  helper

# Promote Option to Result:

# Converts Some to Pass or Fail
# (f: a) => Option b => Result b a
global def getOrFail f = getOrFailFn (\_ f)

# Converts Some to Pass or Fail of output of fn
# (fn: Unit => a) => Option b => Result b a
global def getOrFailFn fn = match _
  Some a = Pass a
  None   = Fail (fn Unit)

# Converts Some to Fail or Pass
# (p: a) => Option b => Result a b
global def getOrPass p = getOrPassFn (\_ p)

# Converts Some to Fail or Pass of output of fn
# (fn: Unit => a) => Option b => Result a b
global def getOrPassFn fn = match _
  None   = Pass (fn Unit)
  Some f = Fail f
