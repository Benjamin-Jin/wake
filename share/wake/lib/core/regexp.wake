# Regular expressions

# quote: (str: String) => String
global def quote str = prim "quote"

# matches: (testRegexp: String) => (str: String) => Boolean
global def matches testRegexp =
  def compile r = prim "re2"
  def matches r str = prim "match"
  matches (compile testRegexp)

# extract: (parensRegexp: String) => (str: String) => List String
global def extract parensRegexp =
  def compile r = prim "re2"
  def extract r str = prim "extract"
  extract (compile parensRegexp)

# replace: (locatorRegexp: String) => (replacement: String) => (str: String) => String
global def replace locatorRegexp =
  def compile r = prim "re2"
  def replace r replacement str = prim "replace"
  replace (compile locatorRegexp)

# tokenize: (seperatorRegexp: String) => (str: String) => List String
global def tokenize seperatorRegexp =
  def compile r = prim "re2"
  def tokenize r str = prim "tokenize"
  tokenize (compile seperatorRegexp)
