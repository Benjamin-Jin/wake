# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# integer operations

# Unary positive sign operator for Integers.
global def +x = x

# Unary negative sign operator for Integers.
global def -x = prim "neg"

# Unary two's complement operator for Integers.
global def ~x = prim "com"

# Binary addition operator for Integers.
global def x + y = prim "add"

# Binary subtraction operator for Integers.
global def x - y = prim "sub"

# Binary multiplication operator for Integers.
global def x * y = prim "mul"

# Binary division operator for Integers.
global def x / y = prim "div"

# Binary remainder operator for Integers.
global def x % y = prim "mod"

# Binary left shift operator for Integers.
global def x << y = prim "shl"

# Binary right shift operator for Integers.
global def x >> y = prim "shr"

# Binary exponentiation operator for Integers.
global def x ^ y = prim "exp"

# Returns the nth root of x.
global def root x n = (\_\_ prim "root") n x

# Unary square root operator. 
global def sqrt x = root 2 x

# Unary absolute-value operator.
global def abs x = prim "abs"

# Binary bitwise XOR operator.
global def xor x y = prim "xor"

# Binary bitwise AND operator.
global def and x y = prim "and"

# Binary bitwise OR operator.
global def or  x y = prim "or"

# Greatest Common Divisor.
global def gcd x y = prim "gcd"

# Least Common Multiple.
global def lcm x y = prim "lcm"

# Computes (x^y) % m.  
global def powm x y m = prim "powm" # fast version of: (x^y) % m

global def icmp x y = prim "icmp"
global def x <=> y = prim "icmp"

# Binary Less-Than operator for Integers.
global def x <  y = isLT (x <=> y)

# Binary Greater-Than operator for Integers.
global def x >  y = isGT (x <=> y)

# Binary Greater-Or-Equal operator for Integers.
global def x >= y = isGE (x <=> y)

# Binary Less-Or-Equal operator for Integers.
global def x <= y = isLE (x <=> y)

# Binary Is-Equal operator for Integers.
global def x == y = isEQ (x <=> y)

# Binary Not-Equal operator for Integers.
global def x != y = isNE (x <=> y)

# Calculates the minimum of two Integers.
global def min x y = if x < y then x else y

# Calculates the maximum of two Integers.
global def max x y = if x < y then y else x

# Calculates the product of a list of integers.
global def prod = foldl (_*_) 1
global def ∏ l = prod l

# Calculates the sum of a list of integers.
global def sum = foldl (_+_) 0
global def ∑ l = sum l
