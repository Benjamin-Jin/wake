# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package wake

# Any => String conversion
export def format any = prim "format"

# These values often come from the wake command-line
# default => Normal
# -d      => Normal
# -q      => Quiet
# -v      => Verbose
# -dv     => Debug
export data LogLevel =
  Debug
  Verbose
  Normal
  Quiet

export data EchoTarget =
  Null
  Stdout
  Stderr # rendered in red if on a tty

export def logError = match _
  Quiet = Stderr
  _     = Stderr

export def logWarn = match _
  Quiet = Null
  _     = Stderr

export def logNormal = match _
  Quiet = Null
  _     = Stdout

export def logVerbose = match _
  Debug   = Stdout
  Verbose = Stdout
  _       = Null

export def logDebug = match _
  Debug = Stdout
  _     = Null

export def logNever = match _
  Debug = Null
  _     = Null

# Useful helper method for inserting a debug step into a pipeline
# def foo = "123123" | tap ("that: {_}") | int | getOrElse 0
export def tap consumerFn value =
  def _ = consumerFn value
  value

# Print the tap output to the console
export def tapLevel level formatFn value =
  def _ = printlnLevel level (formatFn value)
  value

export def tapError   = tapLevel logError
export def tapWarn    = tapLevel logWarn
export def tapNormal  = tapLevel logNormal
export def tapVerbose = tapLevel logVerbose
export def tapDebug   = tapLevel logDebug

# This is private so that users cannot make the build depend on it
def logLevelRaw = prim "level"
def logLevel = match logLevelRaw
  0 = Quiet
  1 = Normal
  2 = Verbose
  _ = Debug

# Print with a given verbosity
export def printLevel logLevelFn =
  def p i outputStr = prim "print"
  match (logLevelFn logLevel)
    Null   = (\_ Unit)
    Stdout = p 1
    Stderr = p 2

export def printlnLevel logLevelFn =
  def f = printLevel logLevelFn
  (\outputStr f "{outputStr}\n")

# Print any type to stdout; even exceptions
export def print   = printLevel logNormal
export def println = printlnLevel logNormal
