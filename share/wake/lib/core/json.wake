# The JSON data type
global data JValue =
  JString  String
  JInteger Integer
  JReal    String
  JBoolean Boolean
  JNull
  JObject  (List (Pair String JValue))
  JArray   (List JValue)

global def parseJSON file = prim "json"

global def escape =
  def fmt t x =
    if      x == 0xa then '\n', t
    else if x == 0x9 then '\t', t
    else if x == 0xd then '\r', t
    else if x <  16  then '\u000', strbase 16 x, t
    else                  '\u00',  strbase 16 x, t
  def helper = match _
    s, c, t = s, str2bin c | fmt (helper t)
    x = x
  _
  | replace '[\\"]' '\\\0'
  | replace "\0" '\\u0000'
  | replace '[\x01-\x1f]' "\0\\0\0"
  | tokenize "\0"
  | helper

def format rhs = match _
  JString  s    = '"', escape s ++ ('"', rhs)
  JInteger i    = str i,    rhs
  JReal    r    = r,        rhs
  JBoolean True = "true",   rhs
  JBoolean False= "false",  rhs
  JNull         = "null",   rhs
  JArray   list =
    def helper value acc = ',', format acc value
    if list.empty then '[]', rhs
    else '[', foldr helper (']', rhs) list | tail
  JObject  list =
    def helper (Pair key value) acc = ',', '"', escape key ++ ('":', format acc value)
    if list.empty then '{}', rhs
    else '{', foldr helper ('}', rhs) list | tail

global def formatJSON x = format Nil x | cat

# JSON query language: json./"baz"./"foo".|(_./"hax" ==/ JInteger 6)./"zz"

global def x .| f = match x
  JArray  l = JArray  (filter f l)
  JObject l = JObject (filter (f $ getPairSecond _) l)
  x = if f x then x else JArray Nil

global def x ./ y = match x
  JString  _ = JArray Nil
  JInteger _ = JArray Nil
  JReal    _ = JArray Nil
  JBoolean _ = JArray Nil
  JNull      = JArray Nil
  JObject  l = match (find (getPairFirst _ ==~ y) l)
    None = JArray Nil
    Some (Pair (Pair _ x) _) = x
  JArray   l =
    def flatten z tail = match (z ./ y)
      JArray m = m ++ tail
      r = r, tail
    JArray (foldr flatten Nil l)

global def x ==/ y = match x y
  (JString  a) (JString  b) = a ==~ b
  (JInteger a) (JInteger b) = a ==  b
  (JReal    a) (JReal    b) = a ==* b
  (JBoolean a) (JBoolean b) = if a then b else !b
  JNull        JNull        = True
  (JObject  a) (JObject  b) =
    def helper (Pair (Pair k c) (Pair l d)) = k ==~ l && c ==/ d
    if a.len != b.len then False else zip a b | forall helper
  (JArray   a) (JArray   b) =
    def helper (Pair c d) = c ==/ d
    if a.len != b.len then False else zip a b | forall helper
  (JArray a) _ = exists (_ ==/ y) a
  _ (JArray b) = exists (_ ==/ x) b
  _ _ = False
