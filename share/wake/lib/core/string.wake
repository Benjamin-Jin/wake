# Copyright 2019 SiFive, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You should have received a copy of LICENSE.Apache2 along with
# this software. If not, you may obtain a copy at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# String methods

global def cat strings =
  def catopen    = prim "catopen"
  def catclose c = prim "catclose"
  def catadd c s = prim "catadd"
  catclose (foldl catadd catopen strings)

global def catWith separator strings =
  if strings.empty then "" else
    def inserted = foldr (separator, _, _) Nil strings
    cat inserted.tail

# String => List String of codepoints
global def explode str = prim "explode"

# String <=> Integer type conversion
global def strbase base n = prim "str" # int -> string
global def intbase base s = prim "int" # string -> int
global def str n = strbase 10 n
global def int s = intbase 0 s

# String <=> Integer Unicode conversion
global def integerToUnicode i = prim "code2str"
global def unicodeToInteger s = prim "str2code"

# String <=> Integer Binary conversion (Warning: may create invalid Unicode)
global def integerToByte i = prim "bin2str"
global def byteToInteger s = prim "str2bin"

# Version of wake
global def version = prim "version"

# Unicode normalization methods
global def unicodeCanonical  x = prim "sNFC"
global def unicodeIdentifier x = prim "sNFKC"
global def unicodeLowercase  x = prim "scaseNFKC"

# Unicode NFC string comparison Ç == C+◌̧
global def scmpCanonical x y = scmp (unicodeCanonical x) (unicodeCanonical y)
# Unicode NFKC string comparison (¼i⁹ = 1/4i9)
global def scmpIdentifier x y = scmp (unicodeIdentifier x) (unicodeIdentifier y)
# Unicode case insensitive NFKC comparison
global def scmpLowercase x y = scmp (unicodeLowercase x) (unicodeLowercase y)
# Raw binary string comparison; no normalization performed
global def scmp x y = prim "scmp"

# NFKC order (fancy format removed) -- secure default
# This is the string order you should probably be using
global def x <=>~y = scmpIdentifier x y
global def x <~  y = lt scmpIdentifier x y
global def x >~  y = y <~ x
global def x >=~ y = ! x <~ y
global def x <=~ y = ! y <~ x

global def x ==~ y = eq scmpIdentifier x y
global def x !=~ y = ! x ==~ y

# Case insensitive order (^ = capitals)
global def x <=>^y = scmpLowercase x y
global def x <^  y = lt scmpLowercase x y
global def x >^  y = y <^ x
global def x >=^ y = ! x <^ y
global def x <=^ y = ! y <^ x

global def x ==^ y = eq scmpLowercase x y
global def x !=^ y = ! x ==^ y

# Raw binary string order
# Only use this for non-textual data
global def x <=>*y = scmp x y
global def x <*  y = lt scmp x y
global def x >*  y = y <* x
global def x >=* y = ! x <* y
global def x <=* y = ! y <* x

global def x ==* y = eq scmp x y
global def x !=* y = ! x ==* y
